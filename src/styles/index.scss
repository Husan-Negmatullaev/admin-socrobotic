@use "sass:math";

// Подключение миксинов ===========================================================================================================================================================================================================================================================================
@import "base/mixins";

// Подключение шрифтов ===========================================================================================================================================================================================================================================================================
//&display=swap - добавить при подключении через плагин &subset=cyrillic-ext
@import url("https://fonts.googleapis.com/css?family=Rubik:300,regular,500,600&display=swap");

// Подключить если есть локальные файлы шрифтов
@import "fonts/fonts";

// Подключение иконочных шрифтов ==============================================================================================================================================================================================================================================================================
// Подключить если есть файл иконочного шрифта
@import "fonts/icons";

// Шрифт по умолчанию ==============================================================================================================================================================================================================================================================================
$fontFamily: "Rubik";
$fontSize: rem(16); // где 14(px) - размер шрифта по умолчанию из макета

// Основные цвета
$mainColor: #6a7a8c; // Цвет шрифта по умолчанию

// Переменные ===============================================================================================================================================================================================================================================================================================
@import "base/variables";

// Тип адаптива:
// 1 = отзывчивость (у контейнера нет брейкпоинтов),
// 2 = по брейк-поинтам (контейнер меняет свою ширину по брейк-поинтам)
$responsiveType: 1;

// Обнуление и общие параметры ============================================================================================================================================================================================== =============================================================================================== ===============================================================================================
@import "base/null";

body {
  font-weight: 400;
  background-color: #f2f4f5;

  // Скролл заблокирован
  .lock & {
    overflow: hidden;
    touch-action: none;
  }

  // Сайт загружен
  .loaded & {}
}

#root {
  height: 100%;
  min-width: 320px;
}

// Оболочка ============================================================================================================================================================================================================================================================================================================================================================================================================================================
.wrapper {
  min-height: 100%;
  display: flex;
  flex-direction: column;
  overflow: hidden;

  // Прижимаем footer
  >main {
    flex: 1 1 auto;
  }

  // Фикс для слайдеров
  >* {
    min-width: 0;
  }
}

// Ограничивающий контейнер ======================================================================================================================================================================================================================

/*
(i) Стили будут применяться ко 
всем классам содержащим *container
Например header__container, main__container и т.д.
Снипет (HTML): cnt
*/
@if ($responsiveType==1) {

  // Отзывчивая
  [class*="container"] {

    &:not(.swal2-html-container) {
      &:not(.swal2-container) {
        &:not(.wrapper-container) {
          @if ($maxWidthContainer>0) {
            max-width: 100%;
            box-sizing: content-box;
            padding: rem(20);
          }

          @media (min-width:$mobile) {
            margin-left: rem(250);
          }
        }
      }
    }

    // @if ($containerPadding>0) {
    //   padding: 0 rem(math.div($containerPadding, 2));
    // }
  }
}

@else {

  // По брейк-поинтам
  [class*="container"] {
    margin: 0 auto;

    @if ($maxWidthContainer>0) {
      max-width: rem($maxWidthContainer);
      box-sizing: content-box;
    }

    @else {
      @if ($containerPadding>0) {
        padding: 0 rem(math.div($containerPadding, 2));
      }
    }

    @media (max-width: $pc) {
      max-width: rem(970);
    }

    @media (max-width: $tablet) {
      max-width: rem(750);
    }

    @media (max-width: $mobile) {
      max-width: none;

      @if ($containerPadding>0 and $maxWidthContainer>0) {
        padding: 0 rem(math.div($containerPadding, 2));
      }
    }
  }
}

// Подключение базовых стилей, шаблонов (заготовок) и вспомогательных  классов
// Для подключения/отключения конкретных стилей смотри base.scss

// Подключение стилей отдельных страниц
@import "common";
@import "base";
@import "app";

.page {
  &__body {}

  &__row {
    &:not(:last-child) {
      margin-bottom: rem(40);
    }
  }
}

.icon-menu {
  @media (max-width: $mobile) {
    display: block;
    position: relative;
    flex: 0 0 rem(20);
    height: rem(15);
    cursor: pointer;
    z-index: 10;

    span,
    &::before,
    &::after {
      content: "";
      transition: all 0.3s ease 0s;
      right: 0;
      position: absolute;
      width: 100%;
      height: rem(2);
      background-color: #fff;
    }

    &::before {
      top: 0;
    }

    &::after {
      bottom: 0;
    }

    span {
      top: calc(50% - rem(1));
    }

    .menu-open & {
      span {
        width: 0;
      }

      &::before,
      &::after {}

      &::before {
        top: calc(50% - rem(1));
        transform: rotate(-45deg);
      }

      &::after {
        bottom: calc(50% - rem(1));
        transform: rotate(45deg);
      }
    }
  }
}

.menu-open aside {
  left: 0 !important;
}

body {
  overflow: hidden;
}

.scrollbar {
  height: 100%;
  overflow: auto;

  &_content {
    height: 100%;
  }
}